{
  "name": "pmtctRriDataSetBase_mock",
  "version": "1.0",
  "tag": "pmtct_rri_dataset_base_mock",
  "description": "",
  "uses": [],
  "sources": [
    {
      "table": "etl.pmtct_rri_dataset",
      "alias": "prd"
    },
    {
      "table": "etl.dates",
      "alias": "dts",
      "join": {
        "type": "INNER",
        "joinCondition": "is_clinical_encounter=1 and encounter_datetime <= dts.endDate and coalesce(prd.death_date, out_of_care) is null"
      }
    },
    {
      "table": "amrs_migration.location",
      "alias": "l",
      "join": {
        "type": "INNER",
        "joinCondition": "prd.location_id = l.location_id"
      }
    },
    {
      "table": "amrs_migration.person",
      "alias": "p",
      "join": {
        "type": "INNER",
        "joinCondition": "p.person_id = prd.person_id"
      }
    }
  ],
  "columns": [
    {
      "type": "derived_column",
      "alias": "on_arvs_first_line",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "cur_arv_line=1"
      }
    },

    {
      "type": "derived_column",
      "alias": "vl_done_past_year",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "timestampdiff(week,vl_1_date,encounter_datetime) <= 52"
      }
    },
    {
      "type": "derived_column",
      "alias": "vl_done_past_year_relative_to_end_date",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "timestampdiff(week,vl_1_date,'{endDate}') <= 52"
      }
    },
    {
      "type": "derived_column",
      "alias": "no_vl_done_past_year",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "cur_arv_line is not null and (vl_1_date is null or timestampdiff(week,vl_1_date,encounter_datetime) >= 52)"
      }
    },

    {
      "type": "derived_column",
      "alias": "vl_done_past_year_lte_1000",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "timestampdiff(week,vl_1_date,encounter_datetime) <= 52 and vl_1 <= 1000"
      }
    },
    {
      "type": "derived_column",
      "alias": "vl_done_this_encounter",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "vl_resulted >= 0 and vl_resulted_date=date(encounter_datetime)"
      }
    },
    {
      "type": "derived_column",
      "alias": "vl_done_this_encounter_lte_1000",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "vl_resulted <= 1000 and vl_resulted_date = date(encounter_datetime)"
      }
    },
    {
      "type": "derived_column",
      "alias": "vl_done_this_encounter_gt_1000",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "vl_resulted > 1000 and vl_resulted_date = date(encounter_datetime)"
      }
    },
    {
      "type": "derived_column",
      "alias": "vl_ordered",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "date(vl_order_date)=date(encounter_datetime)"
      }
    },
    {
      "type": "derived_column",
      "alias": "pending_vl_order",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "timestampdiff(week,vl_order_date,encounter_datetime) >= 0 and vl_1_date < vl_order_date"
      }
    },
    {
      "type": "derived_column",
      "alias": "pending_vl_order_no_result_after_4_weeks",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "timestampdiff(week,vl_order_date,encounter_datetime) >= 4 and vl_1_date < vl_order_date"
      }
    },

    {
      "type": "derived_column",
      "alias": "pregnant",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "edd > encounter_datetime"
      }
    },
    {
      "type": "derived_column",
      "alias": "pregnant_and_on_arvs",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "edd > encounter_datetime and cur_arv_line is not null"
      }
    },
    {
      "type": "derived_column",
      "alias": "virally_suppressed",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "timestampdiff(month,arv_start_date,encounter_datetime) >= 6 and timestampdiff(day, date(vl_1_date), date(dts.endDate)) <= 365 and vl_1 < 1000"
      }
    },
    {
      "type": "derived_column",
      "alias": "virally_suppressed_in_past_year",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "vl_1 < 1000 and  timestampdiff(week,vl_1_date,encounter_datetime) <= 52"
      }
    },
    {
      "type": "derived_column",
      "alias": "viral_load_resulted_in_past_year",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "vl_1 is not null and  timestampdiff(week,vl_1_date,encounter_datetime) <= 52"
      }
    },
    {
      "type": "derived_column",
      "alias": "not_virally_suppressed_in_past_year",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "vl_1> 1000 and  timestampdiff(week,vl_1_date,encounter_datetime) <= 52"
      }
    },
    {
      "type": "derived_column",
      "alias": "on_arvs_gt_26_weeks",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "timestampdiff(week,arv_start_date,encounter_datetime) > 26"
      }
    },

    {
      "type": "derived_column",
      "alias": "vl_done_past_year_gt_1000",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "timestampdiff(week,vl_1_date,encounter_datetime) <= 52 and vl_1 > 1000"
      }
    },

    {
      "type": "derived_column",
      "alias": "age_range",
      "expressionType": "case_statement",
      "expressionOptions": {
        "caseOptions": [
          {
            "condition": "extract(year from (from_days(datediff(now(),p.birthdate)))) >= 15",
            "value": "15_and_above"
          },
          {
            "condition": "else",
            "value": "below_15"
          }
        ]
      }
    },
    {
      "type": "derived_column",
      "alias": "transfer_in_from_non_Ampath_site",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "prd.transfer_in=1287 and (prd.encounter_datetime between DATE_FORMAT(dts.endDate, '%Y-%m-01') and dts.endDate)"
      }
    },
    {
      "type": "derived_column",
      "alias": "transfer_in_from_Ampath_site",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "prd.transfer_in=1286 and (prd.encounter_datetime between DATE_FORMAT(dts.endDate, '%Y-%m-01') and dts.endDate)"
      }
    },
    {
      "type": "derived_column",
      "alias": "transfer_in",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when date(prd.hiv_start_date) between DATE_FORMAT(dts.endDate, '%Y-%m-01') and dts.endDate  then null when prd.transfer_in is not null and (prd.encounter_datetime between DATE_FORMAT(dts.endDate, '%Y-%m-01') and dts.endDate) then 1 else null end"
      }
    },
    {
      "type": "derived_column",
      "alias": "encounter_month",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "MONTH(prd.encounter_datetime)"
      }
    },
    {
      "type": "derived_column",
      "alias": "reporting_month",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "date_format(prd.encounter_datetime, '%m/%Y')"
      }
    },
    {
      "type": "derived_column",
      "alias": "encounter_year",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "YEAR(prd.encounter_datetime)"
      }
    },
    {
      "type": "simple_column",
      "alias": "location",
      "column": "l.name"
    },
    {
      "type": "simple_column",
      "alias": "location_uuid",
      "column": "prd.location_uuid"
    },
    {
      "type": "simple_column",
      "alias": "location_id",
      "column": "prd.location_id"
    },
    {
      "type": "simple_column",
      "alias": "encounter_datetime",
      "column": "prd.encounter_datetime"
    },
    {
      "type": "simple_column",
      "alias": "month",
      "column": "prd.encounter_datetime"
    },
    {
      "type": "simple_column",
      "alias": "person_id",
      "column": "p.person_id"
    },
    {
      "type": "simple_column",
      "alias": "gender",
      "column": "p.gender"
    }
  ],
  "filters": {
    "conditionJoinOperator": "and",
    "conditions": [
      {
        "filterType": "tableColumns",
        "conditionExpression": "prd.encounter_datetime <= ?",
        "parameterName": "endDate"
      },
      {
        "filterType": "tableColumns",
        "conditionExpression": "prd.encounter_datetime >= ?",
        "parameterName": "startDate"
      },
      {
        "filterType": "tableColumns",
        "conditionExpression": "prd.location_id in ?",
        "parameterName": "locations"
      },
      {
        "filterType": "tableColumns",
        "conditionExpression": "round(datediff(prd.encounter_datetime,p.birthdate)/365) >= 0",
        "parameterName": ""
      },
      {
        "filterType": "tableColumns",
        "conditionExpression": "round(datediff(prd.encounter_datetime,p.birthdate)/365) <= 120",
        "parameterName": ""
      },
      {
        "filterType": "tableColumns",
        "conditionExpression": "p.gender in ?",
        "parameterName": "gender"
      },
      {
        "filterType": "tableColumns",
        "conditionExpression": "prd.is_clinical_encounter = 1",
        "parameterName": ""
      },
      {
        "filterType": "tableColumns",
        "conditionExpression": "coalesce(prd.death_date, out_of_care) is null",
        "parameterName": ""
      },
      {
        "filterType": "tableColumns",
        "conditionExpression": "(prd.next_clinical_datetime_hiv is null or next_clinical_datetime_hiv  >= dts.endDate)",
        "parameterName": ""
      }
    ]
  }
}
